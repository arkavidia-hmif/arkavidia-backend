name: Build and Deploy
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  create:
    tags:
      - '**'
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6]
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Lint with flake8
        run: |
          pipenv run flake8 . --count --max-line-length=120 --statistics
      - name: Lint with pep8
        run: |
          pipenv run pycodestyle . --count --max-line-length=120 --statistics
      - name: Test django
        run: |
          DEBUG=TRUE pipenv run python manage.py test -v 3

  build-staging:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@master
      - name: Publish Staging to Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: arkavidia-hmif/arkavidia-backend/builds
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.pkg.github.com
          tags: "latest,staging"

  build-production:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@master
      - name: Get tag name
        id: get_tag_name
        if: github.event_name == 'create'
        run: echo ::set-output name=TAG_NAME::"${GITHUB_REF/refs\/tags\//}"
      - name: Publish Production to Registry
        if: github.event_name == 'create'
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: arkavidia-hmif/arkavidia-backend/builds
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.pkg.github.com
          tags: "production,${{ steps.get_tag_name.outputs.TAG_NAME }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [build-staging, build-production]
    steps:
      - name: Run deployment script over SSH
        uses: maddox/actions/ssh@master
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
        with:
          args: "cd /root/ && docker-compose pull && docker-compose up -d"
